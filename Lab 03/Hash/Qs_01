void put(int key, int value) {
    int index = hashFunction(key, capacity);

    // Check if the key exists in the linked list at the index
    Entry* current = table[index];
    while (current != nullptr) {
        if (current->key == key) {
            current->value = value;
            return;
        }
        current = current->next;
    }

    // Key doesn't exist, create a new entry and insert it
    Entry* newEntry = new Entry(key, value);
    newEntry->next = table[index];
    table[index] = newEntry;
    count++;

    // Ensure load factor
    ensureLoadFactor(count);
}

void ensureLoadFactor(int current_size) {
    double loadFactor = (double)current_size / capacity;
    if (loadFactor >= 0.75) {
        int newCapacity = capacity * 1.5;
        rehash(newCapacity);
    }
}

void rehash(int newCapacity) {
    Entry** oldTable = table;
    int oldCapacity = capacity;

    capacity = newCapacity;
    table = new Entry*[capacity];
    for (int i = 0; i < capacity; i++) {
        table[i] = nullptr;
    }

    for (int i = 0; i < oldCapacity; i++) {
        Entry* current = oldTable[i];
        while (current != nullptr) {
            Entry* next = current->next;
            int newIndex = hashFunction(current->key, capacity);
            current->next = table[newIndex];
            table[newIndex] = current;
            current = next;
        }
    }

    // Delete the old table
    delete[] oldTable;
}
