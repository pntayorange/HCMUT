// Write your helper functions here
Node* remove(int val){
    //TODO
    if (root == nullptr)
        return root;

    if (!search(val)) {
        return nullptr;
    }
    //3. If new root's value is not equal to val, return NULL as val is not present.

    if (root->val != val) {
        return nullptr;
    }

    // Step 4: Perform the removal
    Node* removedNode = root;
    Node* leftSubtree = root->pLeft;
    Node* rightSubtree = root->pRight;

    // Disconnect the root from its children
    if (leftSubtree) {
        leftSubtree->pParent = nullptr;
    }
    if (rightSubtree) {
        rightSubtree->pParent = nullptr;
    }

    if (!leftSubtree) {
        // If there is no left subtree, the right subtree becomes the new root
        root = rightSubtree;
    } else {
        // Splay the largest node in the left subtree
        Node* largestNode = leftSubtree;
        while (largestNode->pRight) {
            largestNode = largestNode->pRight;
        }
        splay(largestNode);

        // Make the right subtree the right child of the new root (largest node in left subtree)
        root->pRight = rightSubtree;
        if (rightSubtree) {
            rightSubtree->pParent = root;
        }
    }

    removedNode->pLeft = removedNode->pRight = nullptr;
    return removedNode;
}