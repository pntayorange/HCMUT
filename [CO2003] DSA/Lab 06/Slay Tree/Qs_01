// write your helper functions here
void rightRotate(Node* y) {
    Node* x = y->pLeft;
    if (!x) return;

    y->pLeft = x->pRight;
    if (x->pRight) x->pRight->pParent = y;

    x->pParent = y->pParent;
    if (!y->pParent) {
        root = x;
    } else if (y == y->pParent->pLeft) {
        y->pParent->pLeft = x;
    } else {
        y->pParent->pRight = x;
    }

    x->pRight = y;
    y->pParent = x;
}

void leftRotate(Node* y) {
    Node* x = y->pRight;
    if (!x) return;

    y->pRight = x->pLeft;
    if (x->pLeft) x->pLeft->pParent = y;

    x->pParent = y->pParent;
    if (!y->pParent) {
        root = x;
    } else if (y == y->pParent->pLeft) {
        y->pParent->pLeft = x;
    } else {
        y->pParent->pRight = x;
    }

    x->pLeft = y;
    y->pParent = x;
}

void splay(Node* p) {
while (p->pParent) {
        Node* parent = p->pParent;
        Node* grandparent = parent->pParent;

        if (!grandparent) {
            // Zig rotation
            if (p == parent->pLeft) {
                rightRotate(parent);
            } else {
                leftRotate(parent);
            }
        } else if (p == parent->pLeft && parent == grandparent->pLeft) {
            // Zig-Zig rotation (Left-Left)
            rightRotate(grandparent);
            rightRotate(parent);
        } else if (p == parent->pRight && parent == grandparent->pRight) {
            // Zig-Zig rotation (Right-Right)
            leftRotate(grandparent);
            leftRotate(parent);
        } else if (p == parent->pRight && parent == grandparent->pLeft) {
            // Zig-Zag rotation (Left-Right)
            leftRotate(parent);
            rightRotate(grandparent);
        } else {
            // Zig-Zag rotation (Right-Left)
            rightRotate(parent);
            leftRotate(grandparent);
        }
    }
    root = p;
}

void insert(int val) {
    Node* newNode = new Node(val);
    if (!root) {
        root = newNode;
        return;
    }

    Node* curr = root;
    Node* parent = nullptr;

    while (curr) {
        parent = curr;
        if (val < curr->val) {
            curr = curr->pLeft;
        } else {
            curr = curr->pRight;
        } 

    }

    newNode->pParent = parent;
    if (val < parent->val) {
        parent->pLeft = newNode;
    } else {
        parent->pRight = newNode;
    }

    splay(newNode);
    
}
