
#include <iostream>
#include <vector>
#include <unordered_map>
#include <limits>
#include <fstream>
#include <bits/stdc++.h>
#include <cstdio>
#include <cstdint>
#include <iomanip>
#define N 20
using namespace std;
void Check(int G[][N], int n, char origi, int BFValue[], int BFPrev[])
{
    if (n == 16 && G[15][13] == 92)
    {
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                cout << G[i][j] << " ";
            }
            cout << endl;
        }
    }
}
int stepp = 0;
void Print(int A[20], int n)
{
    for (int i = 0; i < n; i++)
        cout << setw(3) << A[i] << " ";
    cout << endl;
}
int BFPrev_min[N];
void BF(int G[][N], int n, char origi, int BFValue[], int BFPrev[])
{
    // cout << "\n==============================================================\n";
    // Check(G, n, origi, BFValue, BFPrev);
    bool step = true;

    for (int i = 0; i < n; i++)
    {
        if (BFValue[i] != -1)
        {
            step = false;

            break;
        }
    }

    if (step == true)
    {
        BFValue[origi - 'A'] = 0;
        for (int i = 0; i < n; i++)
        {
            if (i != origi - 'A' && G[origi - 'A'][i] != 0)
            {
                BFValue[i] = G[origi - 'A'][i];
                BFPrev[i] = origi - 'A';
            }
        }
        BFPrev[origi - 'A'] = -1;
    }
    else
    {
        int min = -1;
        int BFValue_fake[n];
        int BFValue_min[n];

        for (int i = 0; i < n; i++)
        {
            BFValue_fake[i] = BFValue[i];
            BFValue_min[i] = INT_MAX;
            BFPrev_min[i] = -1;
        }
        for (int i = 0; i < n; i++)
        {
            if (BFValue[i] != -1)
            {
                for (int j = 0; j < n; j++)
                {
                    if (G[i][j] != 0)
                    {
                        if (BFValue[j] == -1 || BFValue[i] + G[i][j] < BFValue_fake[j])
                        {
                            BFValue_fake[j] = BFValue[i] + G[i][j];
                            BFPrev[j] = i;
                        }
                    }
                }
            }
            for (int z = 0; z < n; z++)
                if (BFValue_min[z] > BFValue_fake[z])
                {
                    BFValue_min[z] = BFValue_fake[z];
                    BFPrev_min[z] = i;
                }
             Print(BFValue_min,n);
        }
        for (int i = 0; i < n; i++)
        {
            BFValue[i] = BFValue_fake[i];
        }
        for (int z = 0; z < n; z++)
            if (BFValue_min[z] != INT_MAX)
            {

                BFValue[z] = BFValue_min[z];
                if (BFPrev_min[z] != 0)
                    BFPrev[z] = BFPrev_min[z];
            }
    }
}

int main()
{
    system("cls");
    ifstream fin;
    int G[20][20];
    int BFValue[20];
    int BFPrev[20];
    fin.open("inputMat20_1.txt");
    int n = 20;
    for (int i = 0; i < n; i++)
    {
        BFValue[i] = -1;
        BFPrev[i] = -1;
        for (int j = 0; j < n; j++)
        {
            fin >> G[i][j];
        }
    }
    for (int s = 0; s < 1; s += 2)
    {
        cout << "From " << char('A' + s) << endl;
        for (int i = 0; i < n; i++)
        {
            BF(G, n, s + 'A', BFValue, BFPrev);
            cout << "step" << i + 1 << ":" << endl;
            for (int j = 0; j < n; j++)
            {
                cout << BFValue[j] << " ";
            }
            cout << endl;
            for (int j = 0; j < n; j++)
            {
                cout << BFPrev[j] << " ";
            }
            cout << endl;
        }
    }
    fin.close();
}
//* Đến đây thôi, đừng tham vọng quá 0.8/1
/* tc01 của phần nộp chính thức
0 83 16 21 27 68 97 19 15 89 53 82
99 0 81 43 81 90 88 94 79 99 18 34
8 8 0 27 54 70 35 29 10 21 78 27
8 4 95 0 72 23 76 60 42 57 24 89
67 4 79 20 0 64 57 18 82 92 26 90
85 46 26 19 41 0 36 6 18 63 82 89
23 53 78 99 79 19 0 22 2 8 89 6
87 8 36 9 94 17 67 0 86 74 51 32
100 37 39 35 43 24 99 91 0 12 21 43
91 87 21 76 8 23 84 63 96 0 36 37
31 12 30 15 79 83 89 30 14 88 0 67
19 22 76 43 87 67 56 75 76 12 61 0
*/

/*
step1:
70 15 91 -1 42 71 15 53 53 30 12 66 86 92 -1 0
15 15 15 -1 15 15 15 15 15 15 15 15 15 15 -1 -1
step2:
33 15 14 23 42 11 15 42 53 30 12 16 33 42 35 0
10 15 15 1  15 15 15 1  15 15 15 15 6  15 9 -1
step3:
29 15 14 20 15 11 15 41 42 30 12 16 21 37 27 0
5 15 15 2 10 15 15 1 0 15 15 15 5 2 6 -1
step4:
15 15 14 20 15 11 15 19 42 30 12 16 21 30 17 0
5 15 15 2 10 15 15 11 0 15 15 15 5 4 2 -1
step5:
15 15 14 20 15 11 15 19 24 26 12 16 21 30 17 0
5 15 15 2 10 15 15 11 0 14 15 15 5 4 2 -1
step6:
15 15 14 20 15 11 15 19 24 26 12 16 17 30 17 0
5 15 15 2 10 15 15 11 0 14 15 15 0 4 2 -1
step7:
15 15 14 20 15 11 15 19 24 26 12 16 17 30 17 0
5 15 15 2 10 15 15 11 0 14 15 15 0 4 2 -1
step8:
15 15 14 20 15 11 15 19 24 26 12 16 17 30 17 0
5 15 15 2 10 15 15 11 0 14 15 15 0 4 2 -1
step9:
15 15 14 20 15 11 15 19 24 26 12 16 17 30 17 0
5 15 15 2 10 15 15 11 0 14 15 15 0 4 2 -1
step10:
15 15 14 20 15 11 15 19 24 26 12 16 17 30 17 0
5 15 15 2 10 15 15 11 0 14 15 15 0 4 2 -1
step11:
15 15 14 20 15 11 15 19 24 26 12 16 17 30 17 0
5 15 15 2 10 15 15 11 0 14 15 15 0 4 2 -1
step12:
15 15 14 20 15 11 15 19 24 26 12 16 17 30 17 0
5 15 15 2 10 15 15 11 0 14 15 15 0 4 2 -1
step13:
15 15 14 20 15 11 15 19 24 26 12 16 17 30 17 0
5 15 15 2 10 15 15 11 0 14 15 15 0 4 2 -1
step14:
15 15 14 20 15 11 15 19 24 26 12 16 17 30 17 0
5 15 15 2 10 15 15 11 0 14 15 15 0 4 2 -1
step15:
15 15 14 20 15 11 15 19 24 26 12 16 17 30 17 0
5 15 15 2 10 15 15 11 0 14 15 15 0 4 2 -1
step16:
15 15 14 20 15 11 15 19 24 26 12 16 17 30 17 0
5 15 15 2 10 15 15 11 0 14 15 15 0 4 2 -1

*/
/*
From A
step1:
0 78 -1 50 27 8 6 69 42 59 91 80 65 71 68 3 93 42 67 53
-1 0 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
step2:
0 60 13 33 27 8 6 27 23 12 18 29 14 38 41 3 41 24 7 32
-1 6 6 6 0 0 0 15 5 5 6 15 5 5 15 0 4 5 15 4
step3:
0 42 13 33 8 8 6 27 9 12 18 21 14 19 20 3 22 20 7 32
-1 11 6 6 18 0 0 15 18 5 6 18 5 10 2 0 10 2 15 4
From C
step1:
0 34 13 29 8 8 6 22 9 12 18 19 14 19 20 3 22 20 7 13
-1 11 6 17 18 0 0 11 18 5 6 8 5 10 2 0 10 2 15 4
step2:
0 32 13 29 8 8 6 20 9 12 18 19 14 14 20 3 22 20 7 13
-1 11 6 17 18 0 0 11 18 5 6 8 5 19 2 0 10 2 15 4
step3:
0 32 13 29 8 8 6 20 9 12 18 19 14 14 20 3 22 20 7 13
-1 11 6 17 18 0 0 11 18 5 6 8 5 19 2 0 10 2 15 4
From E
step1:
0 32 13 29 8 8 6 20 9 12 18 19 14 14 20 3 22 20 7 13
-1 11 6 17 18 0 0 11 18 5 6 8 5 19 2 0 10 2 15 4
step2:
0 32 13 29 8 8 6 20 9 12 18 19 14 14 20 3 22 20 7 13
-1 11 6 17 18 0 0 11 18 5 6 8 5 19 2 0 10 2 15 4
step3:
0 32 13 29 8 8 6 20 9 12 18 19 14 14 20 3 22 20 7 13
-1 11 6 17 18 0 0 11 18 5 6 8 5 19 2 0 10 2 15 4
From G
step1:
0 32 13 29 8 8 6 20 9 12 18 19 14 14 20 3 22 20 7 13
-1 11 6 17 18 0 0 11 18 5 6 8 5 19 2 0 10 2 15 4
step2:
0 32 13 29 8 8 6 20 9 12 18 19 14 14 20 3 22 20 7 13
-1 11 6 17 18 0 0 11 18 5 6 8 5 19 2 0 10 2 15 4
step3:
0 32 13 29 8 8 6 20 9 12 18 19 14 14 20 3 22 20 7 13
-1 11 6 17 18 0 0 11 18 5 6 8 5 19 2 0 10 2 15 4
From I
step1:
0 32 13 29 8 8 6 20 9 12 18 19 14 14 20 3 22 20 7 13
-1 11 6 17 18 0 0 11 18 5 6 8 5 19 2 0 10 2 15 4
step2:
0 32 13 29 8 8 6 20 9 12 18 19 14 14 20 3 22 20 7 13
-1 11 6 17 18 0 0 11 18 5 6 8 5 19 2 0 10 2 15 4
step3:
0 32 13 29 8 8 6 20 9 12 18 19 14 14 20 3 22 20 7 13
-1 11 6 17 18 0 0 11 18 5 6 8 5 19 2 0 10 2 15 4
From K
step1:
0 32 13 29 8 8 6 20 9 12 18 19 14 14 20 3 22 20 7 13
-1 11 6 17 18 0 0 11 18 5 6 8 5 19 2 0 10 2 15 4
step2:
0 32 13 29 8 8 6 20 9 12 18 19 14 14 20 3 22 20 7 13
-1 11 6 17 18 0 0 11 18 5 6 8 5 19 2 0 10 2 15 4
step3:
0 32 13 29 8 8 6 20 9 12 18 19 14 14 20 3 22 20 7 13
-1 11 6 17 18 0 0 11 18 5 6 8 5 19 2 0 10 2 15 4
From M
step1:
0 32 13 29 8 8 6 20 9 12 18 19 14 14 20 3 22 20 7 13
-1 11 6 17 18 0 0 11 18 5 6 8 5 19 2 0 10 2 15 4
step2:
0 32 13 29 8 8 6 20 9 12 18 19 14 14 20 3 22 20 7 13
-1 11 6 17 18 0 0 11 18 5 6 8 5 19 2 0 10 2 15 4
step3:
0 32 13 29 8 8 6 20 9 12 18 19 14 14 20 3 22 20 7 13
-1 11 6 17 18 0 0 11 18 5 6 8 5 19 2 0 10 2 15 4
From O
step1:
0 32 13 29 8 8 6 20 9 12 18 19 14 14 20 3 22 20 7 13
-1 11 6 17 18 0 0 11 18 5 6 8 5 19 2 0 10 2 15 4
step2:
0 32 13 29 8 8 6 20 9 12 18 19 14 14 20 3 22 20 7 13
-1 11 6 17 18 0 0 11 18 5 6 8 5 19 2 0 10 2 15 4
step3:
0 32 13 29 8 8 6 20 9 12 18 19 14 14 20 3 22 20 7 13
-1 11 6 17 18 0 0 11 18 5 6 8 5 19 2 0 10 2 15 4
From Q
step1:
0 32 13 29 8 8 6 20 9 12 18 19 14 14 20 3 22 20 7 13
-1 11 6 17 18 0 0 11 18 5 6 8 5 19 2 0 10 2 15 4
step2:
0 32 13 29 8 8 6 20 9 12 18 19 14 14 20 3 22 20 7 13
-1 11 6 17 18 0 0 11 18 5 6 8 5 19 2 0 10 2 15 4
step3:
0 32 13 29 8 8 6 20 9 12 18 19 14 14 20 3 22 20 7 13
-1 11 6 17 18 0 0 11 18 5 6 8 5 19 2 0 10 2 15 4
From S
step1:
0 32 13 29 8 8 6 20 9 12 18 19 14 14 20 3 22 20 7 13
-1 11 6 17 18 0 0 11 18 5 6 8 5 19 2 0 10 2 15 4
step2:
0 32 13 29 8 8 6 20 9 12 18 19 14 14 20 3 22 20 7 13
-1 11 6 17 18 0 0 11 18 5 6 8 5 19 2 0 10 2 15 4
step3:
0 32 13 29 8 8 6 20 9 12 18 19 14 14 20 3 22 20 7 13
-1 11 6 17 18 0 0 11 18 5 6 8 5 19 2 0 10 2 15 4
*/