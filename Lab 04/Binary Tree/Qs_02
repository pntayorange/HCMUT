// STUDENT ANSWER BEGIN
// You can define other functions here to help you.
int getHeight(Node* node) {
    if (node == nullptr) return 0;
    return 1 + max(getHeight(node->pLeft), getHeight(node->pRight));
}

int getHeight() {
    // TODO: return height of the binary tree.
     return getHeight(root);
}

void preOrder(Node* node, ostringstream& out) {
    if (node == nullptr) return;
    out << node->value << " ";
    preOrder(node->pLeft, out);
    preOrder(node->pRight, out);
}

string preOrder() {
    // TODO: return the sequence of values of nodes in pre-order.
    ostringstream out;
    preOrder(root, out);
    string result = out.str();
    return result.empty() ? "" : result.substr(0, result.size() - 1); // remove last space

}

void inOrder(Node* node, ostringstream& out) {
    if (node == nullptr) return;
    inOrder(node->pLeft, out);
    out << node->value << " ";
    inOrder(node->pRight, out);
}

string inOrder() {
    // TODO: return the sequence of values of nodes in in-order.
     ostringstream out;
    inOrder(root, out);
    string result = out.str();
    return result.empty() ? "" : result.substr(0, result.size() - 1); // remove last space

}

void postOrder(Node* node, ostringstream& out) {
    if (node == nullptr) return;
    postOrder(node->pLeft, out);
    postOrder(node->pRight, out);
    out << node->value << " ";
}

string postOrder() {
    // TODO: return the sequence of values of nodes in post-order.
    ostringstream out;
    postOrder(root, out);
    string result = out.str();
    return result.empty() ? "" : result.substr(0, result.size() - 1); // remove last space
}

// STUDENT ANSWER END