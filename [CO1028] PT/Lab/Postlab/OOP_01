#include <iostream>
using namespace std;

template <class T>
class Array2D {
private:
    int r;
    int c;
    T** arr;

public:
    // Constructor với 2 tham số
    Array2D(int r, int c) : r(r), c(c) {
        arr = new T*[r];
        for (int i = 0; i < r; ++i) {
            arr[i] = new T[c];
        }
    }

    // Constructor với 3 tham số
    Array2D(int r, int c, T init) : r(r), c(c) {
        arr = new T*[r];
        for (int i = 0; i < r; ++i) {
            arr[i] = new T[c];
            for (int j = 0; j < c; ++j) {
                arr[i][j] = init;
            }
        }
    }

    // Destructor
    ~Array2D() {
        for (int i = 0; i < r; ++i) {
            delete[] arr[i];
        }
        delete[] arr;
    }

    // Overriding operator*
    Array2D* operator*(const Array2D &other) {
        if (c != other.r) {
            return nullptr; // Điều kiện nhân ma trận không thỏa mãn
        }
        Array2D* result = new Array2D(r, other.c, T());
        for (int i = 0; i < r; ++i) {
            for (int j = 0; j < other.c; ++j) {
                for (int k = 0; k < c; ++k) {
                    result->arr[i][j] += arr[i][k] * other.arr[k][j];
                }
            }
        }
        return result;
    }

    // Overriding operator[]
    T* operator[](int i) {
        return arr[i];
    }

    // Getters
    int getR() { return this->r; }
    int getC() { return this->c; }

    // Display function
    void disp() {
        for (int i = 0; i < this->r; i++) {
            for (int j = 0; j < this->c; j++) {
                cout << arr[i][j] << " ";
            }
            cout << endl;
        }
    }
};
